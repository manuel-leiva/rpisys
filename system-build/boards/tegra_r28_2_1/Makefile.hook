
SHELL=/bin/bash

linux-download-post:
ifeq ($(BOARD_NAME),"Tegra_X2")
	echo "Decompress $(BOARD_NAME) kernel tx2"
	cd ${LINUX_PATH}/public_release; tar -xjf kernel_src.tbz2
else
	echo "Decompress $(BOARD_NAME) kernel tx1"
	cd ${LINUX_PATH}/public_release; tar -xjf kernel_src-tx1.tbz2
endif

linux-clean-post:
	rm -rf ${LINUX_PATH}/public_release/

image-download-pre:
# When is downloaded the Linux_for_Tegra, all the packages installed
# (Linux Image, device tree, kernel modules and libraries) are overwritten
# Then the current files are moved into a backup directory and are restored
# into the original location after download Linux_for_Tegra
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra ${IMAGE_PATH}/Linux_for_Tegra_bkp

image-download-post:
# Restore files built into the original location after download Linux_for_Tegra
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra_bkp/kernel/Image ${IMAGE_PATH}/Linux_for_Tegra/kernel/
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra_bkp/kernel/Image ${IMAGE_PATH}/Linux_for_Tegra/rootfs/boot/
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra_bkp/kernel/tegra186-quill-p3310-1000-c03-00-base.dtb ${IMAGE_PATH}/Linux_for_Tegra/kernel/dtb
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra_bkp/kernel/tegra186-quill-p3310-1000-c03-00-base.dtb ${IMAGE_PATH}/Linux_for_Tegra/rootfs
	sudo cp -a ${IMAGE_PATH}/Linux_for_Tegra_bkp/rootfs/lib/* ${IMAGE_PATH}/Linux_for_Tegra/rootfs/lib/
	sudo rm -rf ${IMAGE_PATH}/Linux_for_Tegra_bkp

image-make:
	cd ${IMAGE_PATH}/Linux_for_Tegra ; \
	echo "You need root permissions to execute apply_binaries.sh" ; \
	sudo ./apply_binaries.sh

image-clean-post:
	sudo rm -rf Linux_for_Tegra

image-make-custom: image-message
ifeq ($(IMAGE),EMMC)
ifeq ($(BOARD_NAME),"Tegra_X2")
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create EMMC image" ; \
        sudo ./flash.sh jetson-tx2 mmcblk0p1 ; \
    fi
else
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create EMMC image" ; \
        sudo ./flash.sh jetson-tx1 mmcblk0p1 ; \
    fi
endif
endif
# See https://elinux.org/Jetson/TX2_DTB#R28.1
ifeq ($(IMAGE),DTB)
ifeq ($(BOARD_NAME),"Tegra_X2")
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create DTB partition" ; \
        sudo ./flash -r -k kernel-dtb jetson-tx2 mmcblk0p1 ; \
    fi
else
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create EMMC partition" ; \
        sudo ./flash -r -k DTB jetson-tx1 mmcblk0p1 ; \
    fi
endif
endif

image-make-sd-pre: image-message
ifeq ($(BOARD),"Tegra_X2")
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create EMMC image" ; \
        sudo ./flash.sh jetson-tx2 mmcblk1p1 ; \
    fi
else
	read -n 1 -r ; \
    echo ; \
    if [[ $${REPLY} == [yY] ]]; then \
        cd ${IMAGE_PATH}/Linux_for_Tegra ; \
        echo "You need root permissions to create EMMC image" ; \
        sudo ./flash.sh jetson-tx1 mmcblk1p1  ; \
    fi
endif

image-message:
	echo "1. Power down the device. If connected, remove the AC adapter from the device. The device must be powered OFF, and not in a suspend or sleep state."
	echo "2. Connect the Micro-B plug on the USB cable to the Recovery (USB Micro-B) Port on the device and the other end to an available USB port on the host PC."
	echo "3. Connect the power adapter to the device."
	echo "4. Press POWER button."
	echo "5. Press and hold the RECOVERY FORCE (REC) button."
	echo "6. While pressing the RECOVERY FORCE button, press and release the RESET button."
	echo "7. Wait 2 seconds and release the RECOVERY FORCE button."
	echo "Do you want to continue? [y/N]"


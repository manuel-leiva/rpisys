


# Definitions ##################################################################

# Amount of cores in the host system
HOST_CORES:=$(shell cat /proc/cpuinfo | grep processor | wc -l)

COMMON_LIB_BOARD_LIBS_DIR:=board-libs
COMMON_LIB_HOST_LIBS_DIR:=host-libs

# Message types
MSG_ERROR := \033[1;31m
MSG_WARN := \033[0;33m
MSG_INFO := \033[0;34m
MSG_REQ := \033[1;33m
MSG_DEBUG := \033[0;34m
MSG_END := \033[0m

# Commands
ECHO := echo
CP :=cp
RM :=rm -rf
MKDIR :=mkdir -p

INCLUDE_MAKE_PATH:=$(PRJ_ROOT_PATH)/system-build/makefile

# Conditional ##################################################################

ifeq ($(VERBOSE), 1)
MAKE := make -C
else
MAKE := make -s -C
V := @
endif


# Public targets ###############################################################

# Apply patch
# Verify if patches directory exists, if it exists, apply the patches
define COMMON_PATCH_RECIPE
$(1)-patch: $(2)
	$(V) if [ -d $(3)/patches ]; then \
        echo "${MSG_INFO}  Patch $(4) ${MSG_END}" ; \
        quilt push -a ; \
    fi
	$(V) touch $(1)-patch ;
endef


# Revert patch
# Verify if patches directory exists, if it exists, then verify if the
# flag autotools-patch file exists, if it exists, then remove the
# patches
define COMMON_REVPATCH_RECIPE
$(1)-revpatch: $(2)
	$(V) if [ -d $(3)/patches ]; then \
        if [ -f $(3)/$(1)-patch ]; then \
            echo "${MSG_INFO}  Reverse patch $(4) ${MSG_END}" ; \
            quilt pop -a ; \
        fi \
    fi
	$(V) $(RM) $(1)-patch
endef



# Include board definitions
include ../../machine.defs
# Include local configuration
include ../../system-build/makefile/Makefile.local
# Include common recipes and definitions
include ../../system-build/makefile/Makefile.common

# Definitions ##################################################################

## Verify external variables ##
ifndef MACHINE_LIBRARY_HOST
$(error ERROR: MACHINE_LIBRARY_HOST not defined)
endif

# Private definitions ##########################################################
PKGNAME := $(notdir $(shell pwd))

MESON_BUILD_DIR:=build

CROSS_COMPILE := $(MACHINE_TOOLCHAIN_PATH)/$(MACHINE_TOOLCHAIN_PREFIX)
MESON_DL_URL_FILE = $(PACKAGE_DL_URL)$(PACKAGE_NAME)
MESON_DL_TAR_PATH = $(MACHINE_PRJ_DOWNLOAD_PATH)/$(PACKAGE_NAME)
MESON_PKG_PATH = $(PRJ_ROOT_PATH)/libraries/$(PKGNAME)

MESON_PATH:=$(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_HOST_LIBS_DIR)/usr/bin

# PKG_CONFIG_LIBDIR: Replaces the default pkg-config search directory.
export PKG_CONFIG_LIBDIR=$(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_HOST_LIBS_DIR)/$(MACHINE_LIBRARY_MACHINE_INSTALLDIR)/pkgconfig:$(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_HOST_LIBS_DIR)/usr/share/pkgconfig
# Tell make not to export PKG_CONFIG_PATH variable to child processes.
unexport PKG_CONFIG_PATH

# Create parameter list to download the package
ifdef PKGNAME
LINUX_DOWNLOAD_SCRIPT_PARAMS=--pkg-name ${PKGNAME}
endif
ifdef PACKAGE_NAME
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--pkg-target-name ${PACKAGE_NAME}
endif
ifdef MACHINE_PRJ_DOWNLOAD_PATH
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--dl-path ${MACHINE_PRJ_DOWNLOAD_PATH}
endif
ifdef PACKAGE_DL_URL
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--dl-url ${PACKAGE_DL_URL}
endif
ifdef PACKAGE_SHA1SUM
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--sha1sum ${PACKAGE_SHA1SUM}
endif
ifdef MESON_BRANCH
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--branch ${MESON_BRANCH}
endif
ifdef MESON_GIT_DEPTH
LINUX_DOWNLOAD_SCRIPT_PARAMS+=--git-depth ${MESON_GIT_DEPTH}
endif

# Public targets ###############################################################

.PHONY: all clean help download install

all: meson-ninja

clean: meson-revpatch
	@$(ECHO) "${MSG_INFO}  Clean ${PKGNAME}${MSG_END} "
# Remove flags files
	$(V) $(RM) meson-download \
	meson-build \
	meson-patch \
	meson-ninja \
	meson-ninja-install
# Remove package directory
	$(V) $(RM) $(PKGNAME)
	$(call COMMON_RECIPE_RM_PATCH,$(MESON_PKG_PATH))

pkgclean:
# Delete all files in the package directory that are created by
# configuring or building the program.
	$(V) $(RM) \
	meson-ninja \
	meson-ninja-install
	$(V) $(NINJA) ${MESON_PKG_PATH}/${PKGNAME}/${MESON_BUILD_DIR}/ clean

# Alias target to download the package
download: meson-download

# Private targets ##############################################################

meson-download:
	@$(ECHO) "${MSG_INFO}  Download ${PKGNAME}${MSG_END}"
	$(V) $(PRJ_ROOT_PATH)/system-build/scripts/download-package.sh \
    ${LINUX_DOWNLOAD_SCRIPT_PARAMS}
	$(V) touch $@

# meson-revpatch:
# Parameters: target_prefix, dependecies, package-path, message
$(eval $(call COMMON_TARGET_REVPATCH,meson,,${MESON_PKG_PATH},${PKGNAME}))

# meson-patch:
# Parameters: target_prefix, dependecies, package-path, message
$(eval $(call COMMON_TARGET_PATCH,meson,meson-download,${MESON_PKG_PATH},${PKGNAME}))

meson-build: meson-patch
	@    $(ECHO) "${MSG_INFO}  Build ${PKGNAME} ${MSG_END}"
	$(V) cd ${PKGNAME} ; \
	$(MKDIR) ${MESON_BUILD_DIR}; \
	$(MESON) ${PACKAGE_FLAGS} ${MESON_BUILD_DIR} --cross-file ${MESON_PKG_PATH}/cross_file.txt ;
	$(V) touch $@

debug:
	echo CXX=${CROSS_COMPILE}g++ AR=${CROSS_COMPILE}ar CC=${CROSS_COMPILE}gcc RANLIB=${CROSS_COMPILE}ranlib ./configure $(PACKAGE_FLAGS)

meson-ninja: meson-build
	@    $(ECHO) "${MSG_INFO}  Ninja ${PKGNAME}${MSG_END}"
	$(V) $(NINJA) ${PKGNAME}/${MESON_BUILD_DIR} -j $(COMMON_MAKE_JOBS)
	$(V) touch $@

meson-ninja-install: meson-ninja
	@    $(ECHO) "${MSG_INFO}  Make install ${PKGNAME}${MSG_END}"
	$(V) mkdir -p install
	$(V) $(NINJA) ${PKGNAME}/${MESON_BUILD_DIR} install -j $(COMMON_MAKE_JOBS) DESTDIR=$(PRJ_ROOT_PATH)/libraries/${PKGNAME}/install
	$(V) $(MKDIR) $(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_MACHINE_LIBS_DIR)
	$(V) $(MKDIR) $(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_HOST_LIBS_DIR)
	$(V) $(PRJ_ROOT_PATH)/system-build/scripts/meson-lib-installer.sh \
        --pkg-name ${PKGNAME} \
        --host-prefix ${PRJ_ROOT_PATH}/libraries/${COMMON_LIB_HOST_LIBS_DIR} \
        --libs-path ${MACHINE_LIBRARY_MACHINE_INSTALLDIR} \
        --libsrc-path $(PRJ_ROOT_PATH)/libraries/${PKGNAME}/install/ \
        --boarddest-path $(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_MACHINE_LIBS_DIR) \
        --hostdest-path $(PRJ_ROOT_PATH)/libraries/$(COMMON_LIB_HOST_LIBS_DIR)
	$(V) $(RM) install
	$(V) touch $@

# Alias target to download the package
install: meson-ninja-install

help:
	@$(ECHO) "  Targets:"
	@$(ECHO) "    all:       Build meson package"
	@$(ECHO) "    clean:     Remove the package"
	@$(ECHO) "    pkgclean:  Apply clean in the package"
	@$(ECHO) "    install:   Install meson package"
	@$(ECHO) "    download:  Download meson package"
	@$(ECHO) "  Variables"
	@$(ECHO) "    PACKAGE_DL_URL    : Package URL address"
	@$(ECHO) "    PACKAGE_NAME      : Package name"
	@$(ECHO) "    PACKAGE_FLAGS     : Meson build flags"

help-debug:
	@$(ECHO) "    meson-debug-var:            Show variables used during build process"
	@$(ECHO) "    meson-debug-libs-installed: Show the list of libraries installed using: pkg-config --list-all"

meson-debug-var:
	@$(ECHO) PKGNAME: ${PKGNAME}
	@$(ECHO) DESTDIR: ${DESTDIR}
	@$(ECHO) PATH:    ${PATH}
	@$(ECHO) PKG_CONFIG_LIBDIR: ${PKG_CONFIG_LIBDIR}
	@$(ECHO) PACKAGE_FLAGS: ${PACKAGE_FLAGS}
	@$(ECHO) MESON_DL_URL_FILE: ${MESON_DL_URL_FILE}
	@$(ECHO) MESON_DL_TAR_PATH: ${MESON_DL_TAR_PATH}
	@$(ECHO) MESON_PKG_PATH: ${MESON_PKG_PATH}

meson-debug-libs-installed:
	@pkg-config --list-all

meson-debug-targets:
    # The lines must be coherent with the lines used in order to show the real recipes
	@$(ECHO) $(info $(call COMMON_TARGET_REVPATCH,meson,,${MESON_PKG_PATH},${PKGNAME}))
